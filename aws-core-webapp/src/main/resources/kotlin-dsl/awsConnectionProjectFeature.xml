<?xml version="1.0" encoding="UTF-8"?>
<dsl-extension kind="projectFeature" type="OAuthProvider" generateDslJar="true" applicable="params['providerType'] == 'AWS'">
  <class name="AwsConnection">
    <description>
      Stores information and configuration for the access to Amazon Web Services.
    </description>
  </class>

  <init>
    <param name="providerType" value="AWS" />
  </init>

  <function name="awsConnection">
    <description>
      @see AwsConnection
    </description>
  </function>

  <params>
    <param name="displayName" dslName="name">
      <description>
        AWS connection display name
      </description>
    </param>
    <param name="awsRegionName" dslName="regionName" type="string">
      <description>
        Region where this connection will be used.
      </description>
    </param>
    <param name="projectFeatureId" dslName="projectFeatureId" type="string">
      <description>
        Custom identifier for this AWS Connection
      </description>
    </param>
    <param name="awsCredentialsType" dslName="credentialsType" type="compound">
      <description>
        The way how to obtain credentials (just provide the keys, assume IAM role or other)
      </description>
      <option name="static" value="awsAccessKeys">
        <param name="awsAccessKeyId" dslName="accessKeyId" type="string" mandatory="true">
          <description>
            Access Key ID
          </description>
        </param>
        <param name="secure:awsSecretAccessKey" dslName="secretAccessKey" type="string" mandatory="true">
          <description>
            Secret Access Key
          </description>
        </param>
        <param name="awsSessionCredentials" dslName="useSessionCredentials" type="boolean" trueValue="true" falseValue="false">
          <description>
            Whether to use temporary credentials provided by STS service
          </description>
        </param>
        <param name="awsStsEndpoint" dslName="stsEndpoint" type="string">
          <description>
            Endpoint from where to obtain session credentials
          </description>
        </param>
      </option>
      <option name="iamRole" value="awsAssumeIamRole">
        <description>
          Uses another (principal) AWS connection to assume an IAM Role with its permissions. Please, note that the principal connection should have rights to assume the role, more: https://docs.aws.amazon.com/workdocs/latest/developerguide/wd-iam-grantdev.html
        </description>
        <param name="awsIamRoleArn" dslName="roleArn" type="string" mandatory="true">
          <description>
            AWS IAM Role ARN
          </description>
        </param>
        <param name="awsIamRoleSessionName" dslName="sessionName" type="string">
          <description>
            An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons.
          </description>
        </param>
        <param name="awsConnectionId" dslName="awsConnectionId" type="string">
          <description>
            Principal AWS Connection ID (Who will assume the IAM Role)
          </description>
        </param>
        <param name="awsStsEndpoint" dslName="stsEndpoint" type="string">
          <description>
            Endpoint from where to obtain session credentials of the assumed IAM Role
          </description>
        </param>
      </option>
      <option name="default" value="defaultProvider">
        <description>
          Looks for credentials in this order:
          Env Vars - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
          Java System Properties - aws.accessKeyId and aws.secretKey
          Web Identity Token credentials from the environment or container
          Credential profiles file at the default location (~/.aws/credentials)
          Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI" environment variable is set and security manager has permission to access the variable,
          Instance profile credentials delivered through the Amazon EC2 metadata service
          more: https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html
        </description>
      </option>
    </param>
    <param name="awsAllowedInSubProjects" dslName="allowInSubProjects" type="boolean" trueValue="true" falseValue="false">
      <description>
        Whether sub-projects can utilize the connection or not
      </description>
    </param>
    <param name="awsAllowedInBuilds" dslName="allowInBuilds" type="boolean" trueValue="true" falseValue="false">
      <description>
        Whether build steps can utilize the connection or not
      </description>
    </param>
  </params>

  <examples>
    <example>
      <description>
        Adds a new Connection that allows TeamCity to store and manage AWS Credentials (IAM User Access Key).
        When using Session Credentials, a new temporary Access Key will be generated each time this connection is used.
      </description>
      <code>
        awsConnection {
          id = "AwsIamUser"
          name = "AWS IAM User"
          regionName = "eu-central-1"
          credentialsType = static {
            accessKeyId = "keyId"
            secretAccessKey = "Link to credentialsJSON property containing AWS secret access key"
            useSessionCredentials = true
            stsEndpoint = "https://sts.eu-central-1.amazonaws.com"
          }
        }
      </code>
    </example>
    <example>
      <description>
        Adds a new Connection that allows TeamCity to store and manage AWS Credentials (IAM User Access Key).
        This connection can be used by subprojects.
      </description>
      <code>
        awsConnection {
          id = "AwsIamUser"
          name = "AWS IAM User"
          regionName = "eu-central-1"
          credentialsType = static {
            accessKeyId = "keyId"
            secretAccessKey = "Link to credentialsJSON property containing AWS secret access key"
          }
          allowInSubProjects = true
        }
      </code>
    </example>
    <example>
      <description>
        Adds a new Connection that allows TeamCity to store and manage AWS Credentials (IAM User Access Key).
        This connection can be used in build steps.
      </description>
      <code>
        awsConnection {
          id = "AwsIamUser"
          name = "AWS IAM User"
          regionName = "eu-central-1"
          credentialsType = static {
            accessKeyId = "keyId"
            secretAccessKey = "Link to credentialsJSON property containing AWS secret access key"
          }
          allowInBuilds = true
        }
      </code>
    </example>
    <example>
      <description>
        Adds a new Connection that allows TeamCity to assume an AWS IAM Role using another AWS Connection.
      </description>
      <code>
        awsConnection {
          id = "AwsIamRole"
          name = "AWS IAM Role"
          regionName = "eu-central-1"
          credentialsType = iamRole {
            roleArn = "arn:aws:iam::account:role/role-name-with-path"
            sessionName = "TeamCity-session-identifier"
            awsConnectionId = "AwsIamUser"
            stsEndpoint = "https://sts.eu-central-1.amazonaws.com"
          }
        }
      </code>
    </example>

    <example>
      <description>
        Adds a new Connection that allows TeamCity to look for credentials in the default locations on the TeamCity server machine using the Default Credentials Provider Chain.
      </description>
      <code>
        awsConnection {
          id = "AwsDefaultCredsProviderChain"
          name = "AWS Default Creds Provider Chain"
          regionName = "eu-central-1"
          credentialsType = default()
        }
      </code>
    </example>
  </examples>
</dsl-extension>