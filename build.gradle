/*
 * Copyright 2000-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'idea'
    id 'maven'
}

repositories {
    mavenCentral()
}
configurations {
    ftpDeployer
    mavenArtifacts
}

dependencies {
    ftpDeployer "org.apache.maven.wagon:wagon-ftp:2.3"
}

ext {
    teamcityVersion = findProperty('teamcityVersion') ?: '2019.2-SNAPSHOT'

    teamcityDir = findProperty('teamcityDir') ?: "$rootDir/teamcity/servers/TeamCity-${teamcityVersion}"
    teamcityDataDir = "$rootDir/teamcity/data/" + teamcityVersion
    teamcityJavaHome = System.properties['java.home']

    awsSDKVersion = findProperty('aws.sdk.version') ?: '1.11.475'

    buildNumber = project.hasProperty('build.number') ? project.property('build.number') : 'SNAPSHOT-' + new Date().format('yyyyMMddHHmm')

    mavenRepository = findProperty('maven.repository')
    mavenRepositoryUser = findProperty('maven.repository.user')
    mavenRepositoryPassword = findProperty('maven.repository.password')
    pomFile = "$buildDir/amazon-util-pom.xml"
}

idea {
    project {
        vcs = 'Git'
    }
}

configure(subprojects) {
    apply plugin: 'java'

    sourceCompatibility = "1.6"
    targetCompatibility = "1.6"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useTestNG()
        testLogging.showStandardStreams = true
    }
}

task sourceJar(type: Jar) {
    from project(':aws-core-common').sourceSets.main.allJava
    archiveName "aws-core-common-sources.jar"
}

task writePom {
    doLast {
        pom {
            project {
                groupId 'jetbrains.buildServer.util'
                artifactId 'amazon-util'
                version "$buildNumber"
            }
        }
                .whenConfigured{ pom -> pom.dependencies.removeAll { it.scope.contains('test') } }
                .writeTo("$pomFile")
    }
}

task prepareArtifacts {
    dependsOn tasks.sourceJar
    dependsOn tasks.writePom

    doLast {
        artifacts.mavenArtifacts file: file("$rootDir/aws-core-common/build/libs/aws-core-common.jar"), name: 'amazon-util', type: 'jar'
        artifacts.mavenArtifacts file: file("$libsDir/aws-core-common-sources.jar"), name: 'amazon-util-sources', type: 'jar', classifier: 'sources'
    }
}

task readPom {
    doLast {
        def root = new XmlParser().parse(file("$pomFile"))

        def sw = new StringWriter()
        def printer = new XmlNodePrinter(new PrintWriter(sw))
        printer.preserveWhitespace = true
        printer.print(root)

        readPom.ext.result = sw.toString()
    }
}

task prepareUploadMavenArtifactsTask {
    dependsOn tasks.prepareArtifacts
    dependsOn tasks.readPom

    doFirst {
        tasks.uploadMavenArtifacts.repositories.mavenDeployer {
            configuration = configurations.ftpDeployer

            repository(url: "$mavenRepository") {
                authentication(userName: "${mavenRepositoryUser}", password: "${mavenRepositoryPassword}")
            }

            addFilter('amazon-util') {artifact, file ->
                artifact.name == 'amazon-util'
            }.withXml { provider ->
                def builder = provider.asString()
                builder.length = 0
                builder << tasks.readPom.result
            }

            addFilter('amazon-util-sources') {artifact, file ->
                artifact.name == 'amazon-util-sources'
            }.withXml { provider ->
                def builder = provider.asString()
                builder.length = 0
                builder << tasks.readPom.result
            }
        }
    }

    tasks.uploadMavenArtifacts.dependsOn tasks.prepareUploadMavenArtifactsTask
}
